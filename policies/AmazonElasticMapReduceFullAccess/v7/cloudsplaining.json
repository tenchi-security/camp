{
    "ServiceWildcard": [
        "cloudwatch",
        "elasticmapreduce",
        "s3",
        "sdb"
    ],
    "ServicesAffected": [
        "cloudformation",
        "cloudwatch",
        "ec2",
        "elasticmapreduce",
        "iam",
        "s3",
        "sdb"
    ],
    "PrivilegeEscalation": [
        {
            "type": "CreateEC2WithExistingIP",
            "actions": [
                "iam:passrole",
                "ec2:runinstances"
            ]
        },
        {
            "type": "PassExistingRoleToCloudFormation",
            "actions": [
                "iam:passrole",
                "cloudformation:createstack"
            ]
        }
    ],
    "ResourceExposure": [
        "elasticmapreduce:PutBlockPublicAccessConfiguration",
        "iam:PassRole",
        "s3:BypassGovernanceRetention",
        "s3:DeleteAccessPointPolicy",
        "s3:DeleteAccessPointPolicyForObjectLambda",
        "s3:DeleteBucketPolicy",
        "s3:ObjectOwnerOverrideToBucketOwner",
        "s3:PutAccessPointPolicy",
        "s3:PutAccessPointPolicyForObjectLambda",
        "s3:PutAccountPublicAccessBlock",
        "s3:PutBucketAcl",
        "s3:PutBucketPolicy",
        "s3:PutBucketPublicAccessBlock",
        "s3:PutObjectAcl",
        "s3:PutObjectVersionAcl",
        "iam:CreateServiceLinkedRole"
    ],
    "DataExfiltration": [
        "s3:GetObject"
    ],
    "CredentialsExposure": [],
    "InfrastructureModification": [
        "cloudformation:CreateStack",
        "cloudwatch:DeleteAlarms",
        "cloudwatch:DeleteDashboards",
        "cloudwatch:DeleteInsightRules",
        "cloudwatch:DisableAlarmActions",
        "cloudwatch:DisableInsightRules",
        "cloudwatch:EnableAlarmActions",
        "cloudwatch:EnableInsightRules",
        "cloudwatch:PutCompositeAlarm",
        "cloudwatch:PutDashboard",
        "cloudwatch:PutInsightRule",
        "cloudwatch:PutMetricAlarm",
        "cloudwatch:SetAlarmState",
        "cloudwatch:TagResource",
        "cloudwatch:UntagResource",
        "ec2:AuthorizeSecurityGroupEgress",
        "ec2:AuthorizeSecurityGroupIngress",
        "ec2:CancelSpotInstanceRequests",
        "ec2:CreateRoute",
        "ec2:CreateSecurityGroup",
        "ec2:CreateTags",
        "ec2:CreateVpcEndpoint",
        "ec2:DeleteRoute",
        "ec2:DeleteSecurityGroup",
        "ec2:DeleteTags",
        "ec2:ModifyImageAttribute",
        "ec2:ModifyInstanceAttribute",
        "ec2:RequestSpotInstances",
        "ec2:RevokeSecurityGroupEgress",
        "ec2:RunInstances",
        "ec2:TerminateInstances",
        "elasticmapreduce:AddInstanceFleet",
        "elasticmapreduce:AddInstanceGroups",
        "elasticmapreduce:AddJobFlowSteps",
        "elasticmapreduce:AddTags",
        "elasticmapreduce:CancelSteps",
        "elasticmapreduce:CreateEditor",
        "elasticmapreduce:DeleteEditor",
        "elasticmapreduce:ModifyCluster",
        "elasticmapreduce:ModifyInstanceFleet",
        "elasticmapreduce:ModifyInstanceGroups",
        "elasticmapreduce:OpenEditorInConsole",
        "elasticmapreduce:PutAutoScalingPolicy",
        "elasticmapreduce:PutManagedScalingPolicy",
        "elasticmapreduce:RemoveAutoScalingPolicy",
        "elasticmapreduce:RemoveManagedScalingPolicy",
        "elasticmapreduce:RemoveTags",
        "elasticmapreduce:SetTerminationProtection",
        "elasticmapreduce:StartEditor",
        "elasticmapreduce:StopEditor",
        "elasticmapreduce:TerminateJobFlows",
        "iam:CreateServiceLinkedRole",
        "iam:PassRole",
        "s3:AbortMultipartUpload",
        "s3:BypassGovernanceRetention",
        "s3:CreateAccessPoint",
        "s3:CreateAccessPointForObjectLambda",
        "s3:CreateBucket",
        "s3:DeleteAccessPoint",
        "s3:DeleteAccessPointForObjectLambda",
        "s3:DeleteAccessPointPolicy",
        "s3:DeleteAccessPointPolicyForObjectLambda",
        "s3:DeleteBucket",
        "s3:DeleteBucketOwnershipControls",
        "s3:DeleteBucketPolicy",
        "s3:DeleteBucketWebsite",
        "s3:DeleteJobTagging",
        "s3:DeleteObject",
        "s3:DeleteObjectTagging",
        "s3:DeleteObjectVersion",
        "s3:DeleteObjectVersionTagging",
        "s3:DeleteStorageLensConfiguration",
        "s3:DeleteStorageLensConfigurationTagging",
        "s3:GetObject",
        "s3:ObjectOwnerOverrideToBucketOwner",
        "s3:PutAccelerateConfiguration",
        "s3:PutAccessPointConfigurationForObjectLambda",
        "s3:PutAccessPointPolicy",
        "s3:PutAccessPointPolicyForObjectLambda",
        "s3:PutAnalyticsConfiguration",
        "s3:PutBucketAcl",
        "s3:PutBucketCORS",
        "s3:PutBucketLogging",
        "s3:PutBucketNotification",
        "s3:PutBucketObjectLockConfiguration",
        "s3:PutBucketOwnershipControls",
        "s3:PutBucketPolicy",
        "s3:PutBucketPublicAccessBlock",
        "s3:PutBucketRequestPayment",
        "s3:PutBucketTagging",
        "s3:PutBucketVersioning",
        "s3:PutBucketWebsite",
        "s3:PutEncryptionConfiguration",
        "s3:PutIntelligentTieringConfiguration",
        "s3:PutInventoryConfiguration",
        "s3:PutJobTagging",
        "s3:PutLifecycleConfiguration",
        "s3:PutMetricsConfiguration",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionAcl",
        "s3:PutObjectVersionTagging",
        "s3:PutReplicationConfiguration",
        "s3:PutStorageLensConfigurationTagging",
        "s3:ReplicateDelete",
        "s3:ReplicateObject",
        "s3:ReplicateTags",
        "s3:RestoreObject",
        "s3:UpdateJobPriority",
        "s3:UpdateJobStatus",
        "sdb:BatchDeleteAttributes",
        "sdb:BatchPutAttributes",
        "sdb:CreateDomain",
        "sdb:DeleteAttributes",
        "sdb:DeleteDomain",
        "sdb:PutAttributes"
    ]
}